from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from statsmodels.tsa.arima.model import ARIMA
import pandas as pd
import numpy as np

# Initialize SparkSession
spark = SparkSession.builder \
    .appName("EmployeeLeavingForecasting") \
    .getOrCreate()

# Aggregate data by OrganizationType and quarters of 2023
aggregated_df = merged_df.groupBy('OrganizationType', 'Quarterly_Trend_Num').count()

# Train ARIMA model for each OrganizationType and forecast for 2024 quarters
forecast_results = {}
for org_type in aggregated_df.select('OrganizationType').distinct().rdd.flatMap(lambda x: x).collect():
    org_type_df = aggregated_df.filter(col('OrganizationType') == org_type)
    org_type_df = org_type_df.orderBy('Quarterly_Trend_Num')

    # Convert DataFrame to Pandas for ARIMA model
    pandas_df = org_type_df.toPandas()
    pandas_df.set_index('Quarterly_Trend_Num', inplace=True)

    # Train ARIMA model
    model = ARIMA(pandas_df['count'], order=(1, 0, 0))
    fitted_model = model.fit()

    # Forecast for 2024 quarters
    forecast = fitted_model.forecast(steps=4)
    forecast_results[org_type] = forecast

# Convert forecast results to a DataFrame
forecast_df = pd.DataFrame(forecast_results).T.reset_index()
forecast_df.columns = ['OrganizationType', 'Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024']

# Ensure all columns have the same length by filling missing values with NaN
max_length = max(len(forecast) for forecast in forecast_results.values())
for column in ['Q1_2024', 'Q2_2024', 'Q3_2024', 'Q4_2024']:
    forecast_df[column] = forecast_df[column].apply(lambda x: list(x) + [np.nan] * (max_length - len(x)))

# Display forecast DataFrame
forecast_spark_df = spark.createDataFrame(forecast_df)
forecast_spark_df.show()

# Stop SparkSession
spark.stop()
